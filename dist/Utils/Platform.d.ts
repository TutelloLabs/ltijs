export = Platform;
/**
 * @description Class representing a registered platform.
 */
declare class Platform {
    /**
       * @param {string} name - Platform name.
       * @param {string} platformUrl - Platform url.
       * @param {string} clientId - Client Id generated by the platform.
       * @param {string} authenticationEndpoint - Authentication endpoint that the tool will use to authenticate within the platform.
       * @param {string} accesstokenEndpoint - Access token endpoint for the platform.
       * @param {string} authorizationServer - Authorization server identifier to be used as the aud when requesting an access token. If not specified, the access token endpoint URL will be used.
       * @param {string} kid - Key id for local keypair used to sign messages to this platform.
       * @param {string} _ENCRYPTIONKEY - Encryption key used
       * @param {Object} _authConfig - Authentication configurations for the platform.
       */
    constructor(name: string, platformUrl: string, clientId: string, authenticationEndpoint: string, accesstokenEndpoint: string, authorizationServer: string, kid: string, _ENCRYPTIONKEY: string, _authConfig: any, Database: any);
    /**
     * @description Gets the platform url.
     */
    platformUrl(): Promise<string>;
    /**
     * @description Gets the platform client id.
     */
    platformClientId(): Promise<string>;
    /**
       * @description Sets/Gets the platform name.
       * @param {string} [name] - Platform name.
       */
    platformName(name?: string): Promise<string>;
    /**
       * @description Gets the platform Id.
       */
    platformId(): Promise<string>;
    /**
     * @description Gets the platform key_id.
     */
    platformKid(): Promise<string>;
    /**
     * @description Sets/Gets the platform status.
     * @param {Boolean} [active] - Whether the Platform is active or not.
     */
    platformActive(active?: boolean): Promise<boolean>;
    /**
       * @description Gets the RSA public key assigned to the platform.
       *
       */
    platformPublicKey(): Promise<any>;
    /**
       * @description Gets the RSA private key assigned to the platform.
       *
       */
    platformPrivateKey(): Promise<any>;
    /**
       * @description Sets/Gets the platform authorization configurations used to validate it's messages.
       * @param {string} method - Method of authorization "RSA_KEY" or "JWK_KEY" or "JWK_SET".
       * @param {string} key - Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.
       */
    platformAuthConfig(method: string, key: string): Promise<any>;
    /**
     * @description Sets/Gets the platform authorization endpoint used to perform the OIDC login.
     * @param {string} [authenticationEndpoint - Platform authentication endpoint.
     */
    platformAuthenticationEndpoint(authenticationEndpoint?: string): Promise<string>;
    /**
       * @description Sets/Gets the platform access token endpoint used to authenticate messages to the platform.
       * @param {string} [accesstokenEndpoint] - Platform access token endpoint.
       */
    platformAccessTokenEndpoint(accesstokenEndpoint?: string): Promise<string>;
    /**
     * @description Sets/Gets the platform authorization server identifier used as the aud claim when requesting access tokens.
     * @param {string} [authorizationServer] - authorization server identifier.
     */
    platformAuthorizationServer(authorizationServer?: string): Promise<string>;
    /**
       * @description Gets the platform access token or attempts to generate a new one.
       * @param {String} scopes - String of scopes.
       */
    platformAccessToken(scopes: string): Promise<any>;
    /**
     * @description Retrieves the platform information as a JSON object.
     */
    platformJSON(): Promise<{
        id: string;
        url: string;
        clientId: string;
        name: string;
        authenticationEndpoint: string;
        accesstokenEndpoint: string;
        authorizationServer: string;
        authConfig: any;
        publicKey: any;
        active: boolean;
    }>;
    /**
     * @description Deletes a registered platform.
     */
    delete(): Promise<boolean>;
    /**
     * @deprecated
     */
    remove(): Promise<boolean>;
    /**
     * @description Sets/Gets the platform authorization endpoint used to perform the OIDC login.
     * @param {string} [authenticationEndpoint] - Platform authentication endpoint.
     * @deprecated
     */
    platformAuthEndpoint(authenticationEndpoint?: string): Promise<string>;
    #private;
}
//# sourceMappingURL=Platform.d.ts.map